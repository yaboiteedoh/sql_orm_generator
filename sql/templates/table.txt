import sqlite3
from pathlib import Path

from ..classes.classes import SQLiteTable
from ..classes.dataclasses import {{ table.dataclass }}


class {{ table.dataclass }}sTable(SQLiteTable):
    def __init__(self):
        self.db_dir = str(Path('{{ db_name }}', 'data', 'data.db'))
        self.dataclass = {{ table.dataclass }}
        self._table_name = '{{ table.name }}'
        self._list_columns = { {% for column in table.list_columns %}
            '{{ column.name }}': self.read_by_{{ column.name }},{% endfor %}
        }
        self._single_columns = {
            'rowid': self.read_by_rowid,{% for column in table.single_columns %}
            '{{ column.name }}': self.read_by_{{ column.name }},{% endfor %}
        }
        self._other_columns = [ {% for column in table.other_columns %}
            '{{ column.name }}',{% endfor %}
        ]
        self._groups = {
            'all': self.read_all{% for group in table.groups %},
            '{{ group.name }}': self.read_by_{{ group.name }},{% endfor %}
        }
        self._filters = { {% for filter in table.filters %}
            '{{ filter.name }}': self.read_by_{{ filter.name }},{% endfor %}
        }


    def init_db(self):
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            sql = '''
                CREATE TABLE {{ table.name }}({% for column in table.columns %}
                    {{ column.name }} {{ column.data_type }}{{ column.params }},{% endfor %}
                    rowid INTEGER PRIMARY KEY AUTOINCREMENT{% if table.references %},
                    {% endif %}{% for column in table.columns %}{% if 'references' in column.classes.check %}
                    FOREIGN KEY({{ column.name }})
                        REFERENCES {{ column.classes.references }}{% endif %}{% endfor %}
                )
            '''
            cur.execute(sql)


    def add(self, {{ table.name[:-1] }}: dict) -> int:
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            sql = '''
                INSERT INTO {{ table.name }}({% for i, column in enumerate(table.columns) %}
                    {{ column.name }}{% if i < table.length %},{% endif %}{% endfor %}
                )
                VALUES ({% for i, column in enumerate(table.columns) %}
                    :{{ column.name }}{% if i < table.length %},{% endif %}{% endfor %}
                )
            '''
            cur.execute(sql, {{ table.name[:-1] }})
            return cur.lastrowid


    def read_all(self) -> list[{{ table.dataclass }}]:
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            cur.row_factory = self._dataclass_row_factory
            sql = 'SELECT * FROM {{ table.name }}'
            cur.execute(sql)
            return cur.fetchall()


    def read_by_rowid(self, rowid: int) -> {{ table.dataclass }}:
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            cur.row_factory = self._dataclass_row_factory
            sql = 'SELECT * FROM {{ table.name }} WHERE rowid=?'
            cur.execute(sql, (rowid,))
            return cur.fetchone(){% for column in table.list_columns %}


    def read_by_{{ column.name }}(self, {{ column.name }}: {{ column.py_data_type }}) -> list[{{ table.dataclass }}]:
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            cur.row_factory = self._dataclass_row_factory
            sql = 'SELECT * FROM {{ table.name }} WHERE {{ column.name }}=?'
            cur.execute(sql, ({{ column.name }},))
            return cur.fetchall(){% endfor %}{% for column in table.single_columns %}


    def read_by_{{ column.name }}(self, {{ column.name }}: {{ column.py_data_type }}) -> {{ table.dataclass }}:
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            cur.row_factory = self._dataclass_row_factory
            sql = 'SELECT * FROM {{ table.name }} WHERE {{ column.name }}=?'
            cur.execute(sql, ({{ column.name }},))
            return cur.fetchone(){% endfor %}{% for group in table.groups %}


    def read_by_{{ group.name }}(self, {{ group.name }}: {{ group.py_data_type}}) -> list[{{ table.dataclass }}] | {{ table.dataclass }}:
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            cur.row_factory = self._dataclass_row_factory
            sql = '''
                SELECT * FROM {{ table.name }}
                WHERE {{ group.columns[0].name }}=?{% for column in group.columns[1:] %}
                OR {{ column.name }}=?{% endfor %}
            '''
            cur.execute(sql, ({% for i, key in enumerate(group.columns) %}{% if i < group.length %}{{ group.name }}, {% else %}{{ group.name }}{% endif %}{% endfor %}))
            response = cur.fetchall()

            if not response or response != 1:
                return response
            return response[0]{% endfor %}{% for filter in table.filters %}


    def read_by_{{ filter.name }}(self, {% for i, query in enumerate(filter.queries) %}{{ query.name }}: {{ query.py_data_type }}{% if i < filter.length %}, {% endif %}{% endfor%}) -> list[{{ table.dataclass }}] | {{ table.dataclass }}:
        with sqlite3.connect(self.db_dir) as con:
            cur = con.cursor()
            cur.row_factory = self._dataclass_row_factory
            sql = '''
                SELECT * FROM {{ table.name }}
                WHERE
                    {% if filter.queries[0] in filter.groups %}({{ filter.queries[0].columns[0].name }}=?{% for column in filter.queries[0].columns[1:] %} OR {{ column.name }}=?{% endfor %}){% else %}{{ filter.queries[0].name }}=?{% endif %}{% for query in filter.queries[1:] %}{% if query in filter.groups %}
                    AND
                        ({% for i, column in enumerate(query.columns) %}{{ column.name }}=?{% if i < query.length %} OR {% endif %}{% endfor %}){% else %}
                    AND
                        {{ query.name }}=?{% endif %}{% endfor %}
            '''
            cur.execute(sql, ({% for i, query in enumerate(filter.queries) %}{% if query in filter.columns %}{{ query.name }}{% if i < filter.length %}, {% endif %}{% else %}{% for j, column in enumerate(query.columns) %}{{ column.name }}{% if j < query.length %}, {% endif %}{% if i < filter.length %}, {% endif %}{% endfor %}{% endif %}{% endfor %}))
            response = cur.fetchall()

            if not response or len(response) != 1:
                return response
            return response[0]{% endfor %}


        def update(self, {{ table.name[:-1] }}: {{ table.dataclass }}) -> None:
            with sqlite3.connect(self.db_dir) as con:
                cur = con.cursor()
                sql = '''
                    UPDATE {{ table.name }}
                    SET{% for i, column in enumerate(table.columns) %}
                        {{ column.name }}=:{{ column.name }}{% if i < table.length %},{% endif %}{% endfor %}
                    WHERE rowid=:rowid
                '''
                cur.execute(sql, obj.as_dict)
                con.commit()
